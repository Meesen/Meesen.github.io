import { Component, EventEmitter, Inject, Input, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { EMPTY, from, mergeMap, Subject, takeUntil } from 'rxjs';
import { tsParticles } from 'tsparticles-engine';
import * as i0 from "@angular/core";
export class NgParticlesComponent {
    constructor(platformId) {
        this.platformId = platformId;
        this.particlesLoaded = new EventEmitter();
        this.destroy$ = new Subject();
        this.id = 'tsparticles';
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const cb = (container) => {
            this.container = container;
            this.particlesLoaded.emit(container);
        };
        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())
            .pipe(mergeMap(() => {
            if (this.url) {
                return tsParticles.loadJSON(this.id, this.url);
            }
            else if (this.options) {
                return tsParticles.load(this.id, this.options);
            }
            else {
                console.error('You must specify options or url to load tsParticles');
                return EMPTY;
            }
        }), takeUntil(this.destroy$))
            .subscribe(cb);
    }
    ngOnDestroy() {
        this.container?.destroy();
        this.destroy$.next();
    }
}
NgParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NgParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: NgParticlesComponent, selector: "ng-particles", inputs: { options: "options", url: "url", id: "id", particlesInit: "particlesInit" }, outputs: { particlesLoaded: "particlesLoaded" }, ngImport: i0, template: '<div [id]="id"></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgParticlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-particles',
                    template: '<div [id]="id"></div>',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { options: [{
                type: Input
            }], url: [{
                type: Input
            }], id: [{
                type: Input
            }], particlesInit: [{
                type: Input
            }], particlesLoaded: [{
                type: Output
            }] } });
export class ParticlesComponent extends NgParticlesComponent {
    constructor(platformId) {
        super(platformId);
        this.platformId = platformId;
        this.particlesLoaded = new EventEmitter();
        this.id = 'tsparticles';
    }
}
ParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
ParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: ParticlesComponent, selector: "Particles", inputs: { options: "options", url: "url", id: "id", particlesInit: "particlesInit" }, outputs: { particlesLoaded: "particlesLoaded" }, usesInheritance: true, ngImport: i0, template: '<div [id]="id"></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ParticlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'Particles',
                    template: '<div [id]="id"></div>',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { options: [{
                type: Input
            }], url: [{
                type: Input
            }], id: [{
                type: Input
            }], particlesInit: [{
                type: Input
            }], particlesLoaded: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcGFydGljbGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXBhcnRpY2xlcy9zcmMvbGliL25nLXBhcnRpY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBUWpELE1BQU0sT0FBTyxvQkFBb0I7SUFVN0IsWUFBMkMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUxuRCxvQkFBZSxHQUE0QixJQUFJLFlBQVksRUFBYSxDQUFDO1FBRTNFLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBSW5DLElBQUksQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ25DLE9BQU87U0FDVjtRQUVELE1BQU0sRUFBRSxHQUFHLENBQUMsU0FBcUIsRUFBRSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDekUsSUFBSSxDQUNELFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2xEO2lCQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDckIsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2xEO2lCQUFNO2dCQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztnQkFDckUsT0FBTyxLQUFLLENBQUM7YUFDaEI7UUFDTCxDQUFDLENBQUMsRUFDRixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUMzQjthQUNBLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOztpSEE1Q1Esb0JBQW9CLGtCQVVULFdBQVc7cUdBVnRCLG9CQUFvQiwyTEFGbkIsdUJBQXVCOzJGQUV4QixvQkFBb0I7a0JBSmhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ3BDOzswQkFXZ0IsTUFBTTsyQkFBQyxXQUFXOzRDQVR0QixPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLEVBQUU7c0JBQVYsS0FBSztnQkFDRyxhQUFhO3NCQUFyQixLQUFLO2dCQUNJLGVBQWU7c0JBQXhCLE1BQU07O0FBOENYLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxvQkFBb0I7SUFPeEQsWUFBb0QsVUFBa0I7UUFDbEUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRDhCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFGbkQsb0JBQWUsR0FBNEIsSUFBSSxZQUFZLEVBQWEsQ0FBQztRQUt4RixJQUFJLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQztJQUM1QixDQUFDOzsrR0FYUSxrQkFBa0Isa0JBT1AsV0FBVzttR0FQdEIsa0JBQWtCLCtNQUZqQix1QkFBdUI7MkZBRXhCLGtCQUFrQjtrQkFKOUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLHVCQUF1QjtpQkFDcEM7OzBCQVFnQixNQUFNOzJCQUFDLFdBQVc7NENBTmIsT0FBTztzQkFBeEIsS0FBSztnQkFDWSxHQUFHO3NCQUFwQixLQUFLO2dCQUNZLEVBQUU7c0JBQW5CLEtBQUs7Z0JBQ1ksYUFBYTtzQkFBOUIsS0FBSztnQkFDYSxlQUFlO3NCQUFqQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBFTVBUWSwgZnJvbSwgbWVyZ2VNYXAsIFN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdHNQYXJ0aWNsZXMgfSBmcm9tICd0c3BhcnRpY2xlcy1lbmdpbmUnO1xuaW1wb3J0IHR5cGUgeyBDb250YWluZXIsIEVuZ2luZSB9IGZyb20gJ3RzcGFydGljbGVzLWVuZ2luZSc7XG5pbXBvcnQgeyBJUGFydGljbGVzUHJvcHMgfSBmcm9tICcuL25nLXBhcnRpY2xlcy5tb2R1bGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25nLXBhcnRpY2xlcycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IFtpZF09XCJpZFwiPjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIE5nUGFydGljbGVzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKSBvcHRpb25zPzogSVBhcnRpY2xlc1Byb3BzO1xuICAgIEBJbnB1dCgpIHVybD86IHN0cmluZztcbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHBhcnRpY2xlc0luaXQ/OiAoZW5naW5lOiBFbmdpbmUpID0+IFByb21pc2U8dm9pZD47XG4gICAgQE91dHB1dCgpIHBhcnRpY2xlc0xvYWRlZDogRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4oKTtcblxuICAgIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHByaXZhdGUgY29udGFpbmVyPzogQ29udGFpbmVyO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmlkID0gJ3RzcGFydGljbGVzJztcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYiA9IChjb250YWluZXI/OiBDb250YWluZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXNMb2FkZWQuZW1pdChjb250YWluZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZyb20odGhpcy5wYXJ0aWNsZXNJbml0ID8gdGhpcy5wYXJ0aWNsZXNJbml0KHRzUGFydGljbGVzKSA6IFByb21pc2UucmVzb2x2ZSgpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWVyZ2VNYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c1BhcnRpY2xlcy5sb2FkSlNPTih0aGlzLmlkLCB0aGlzLnVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNQYXJ0aWNsZXMubG9hZCh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignWW91IG11c3Qgc3BlY2lmeSBvcHRpb25zIG9yIHVybCB0byBsb2FkIHRzUGFydGljbGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoY2IpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250YWluZXI/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1BhcnRpY2xlcycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IFtpZF09XCJpZFwiPjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlc0NvbXBvbmVudCBleHRlbmRzIE5nUGFydGljbGVzQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKSBvdmVycmlkZSBvcHRpb25zPzogSVBhcnRpY2xlc1Byb3BzO1xuICAgIEBJbnB1dCgpIG92ZXJyaWRlIHVybD86IHN0cmluZztcbiAgICBASW5wdXQoKSBvdmVycmlkZSBpZDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIG92ZXJyaWRlIHBhcnRpY2xlc0luaXQ/OiAoZW5naW5lOiBFbmdpbmUpID0+IFByb21pc2U8dm9pZD47XG4gICAgQE91dHB1dCgpIG92ZXJyaWRlIHBhcnRpY2xlc0xvYWRlZDogRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBvdmVycmlkZSBwbGF0Zm9ybUlkOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIocGxhdGZvcm1JZCk7XG5cbiAgICAgICAgdGhpcy5pZCA9ICd0c3BhcnRpY2xlcyc7XG4gICAgfVxufVxuIl19